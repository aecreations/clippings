/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is Clippings.
 *
 * The Initial Developer of the Original Code is 
 * Alex Eng <ateng@users.sourceforge.net>.
 * Portions created by the Initial Developer are Copyright (C) 2005-2015
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *
 * ***** END LICENSE BLOCK ***** */

#include "nsISupports.idl"

typedef string uri;
typedef wstring aestring;

interface nsIRDFDataSource;
interface aeIDictionary;
interface nsIRDFContainer;
interface nsIDOMElement;


[scriptable, uuid(24cea707-946d-11da-a72b-0800200c9a66)]
interface aeIClippingsListener : nsISupports
{
  attribute short origin;

  void newFolderCreated(in uri aFolderURI);
  void newClippingCreated(in uri aClippingURI);
  void importDone(in size_t aNumItems);
  void dataSrcLocationChanged(in uri aDataSrcURL);
};


[scriptable, uuid(44cc2b80-ac35-4428-9dd1-13c1cf2dfc87)]
interface aeIClippingsService : nsISupports 
{
  /*
   * aFileType constants for method exportToFile().
   */
  const short FILETYPE_RDF_XML = 0;
  const short FILETYPE_CLIPPINGS_1X = 1;  /* Clippings 1.x series */
  const short FILETYPE_HTML = 2;

  /*
   * aOrigin constants for methods createNewFolderEx() and copyTo(). 
   */
  const short ORIGIN_CLIPPINGS_MGR = 1;
  const short ORIGIN_HOSTAPP = 2;
  const short ORIGIN_NEW_CLIPPING_DLG = 3;

  /*
   * aImportFlag constants for method importShortcutKeys().
   */
  const short IMPORT_REPLACE_CURRENT = 1;
  const short IMPORT_KEEP_CURRENT = 2;

  /*
   * aLabel constants (can't use string constants in IDL; fake them by using
   * read-only attributes).
   */
  readonly attribute aestring LABEL_NONE;
  readonly attribute aestring LABEL_RED;
  readonly attribute aestring LABEL_ORANGE;
  readonly attribute aestring LABEL_YELLOW;
  readonly attribute aestring LABEL_GREEN;
  readonly attribute aestring LABEL_BLUE;
  readonly attribute aestring LABEL_PURPLE;
  readonly attribute aestring LABEL_GREY;

  const short MAX_NAME_LENGTH = 64;

  readonly attribute uri     kRootFolderURI;
  readonly attribute aestring dataSourceURL;
  readonly attribute size_t  numItems;  


  /*
   * Method getDataSource():
   * Initializes the Clippings service with the datasource located at the
   * given URL.
   * If the datasource is already initialized, then this method returns its 
   * nsIRDFDataSource object; in this situation, an empty URL string can
   * be passed.
   * Throws an exception if an error occurs during initialization.
   */
  nsIRDFDataSource getDataSource(in uri aDataSrcURL);

  /*
   * Method reset():
   * Purges any detached folders and resets the Clippings service.
   * The datasource is set to null.
   */
  void reset();

  /*
   * The following creation, modification and deletion methods throws
   * NS_ERROR_NOT_INITIALIZED if the data source is not initialized.
   */

  uri createNewClipping(in uri aParentFolder,
			in aestring aName,
			in aestring aText,
			in aestring aSourceURL,
                        in aestring aLabel,
			in boolean aDontNotify);

  uri createNewClippingEx(in uri aParentFolder,
			  in uri aURI,
			  in aestring aName,
			  in aestring aText,
			  in aestring aSourceURL,
			  in aestring aLabel,
			  in size_t aPos,
			  in boolean aDontNotify);

  uri createNewFolder(in uri aParentFolder, in aestring aName,
		      in boolean aDontNotify);

  uri createNewFolderEx(in uri aParentFolder,
			in uri aURI,
			in aestring aName,
			in size_t aPos,
			in boolean aDontNotify,
			in short aOrigin);

  void remove(in uri aURI);

  void removeAll();

  size_t detachFromFolder(in uri aFolderURI);
  /* throws NS_ERROR_INVALID_ARG - if URI argument is not a folder resource */

  void reattachToFolder(in uri aParentFolder, in uri aURI, in size_t aPos);

  void purgeDetachedItems();

  boolean isDetached(in uri aURI);

  uri copyTo(in uri aURI, in uri aDestFolder, in uri aDestItemURI,
	     in size_t aDestPos, in boolean aRemoveOriginal, in short aOrigin);
  /* throws NS_ERROR_FAILURE - if attempting to move an item into the same
     folder or if moving a folder into itself */

  boolean exists(in uri aURI);

  void findByName(in aestring aSearchText, in boolean aMatchCase,
                  in boolean aSearchFolders, out size_t aCount,
		  [retval, array, size_is(aCount)] out uri aRetVal);

  /* 
   * Methods indexOf() and ctrIndexOf():
   * Two "indexOf" methods are necessary to workaround a problem where
   * renumbering of container items must be avoided when deleting all items in
   * a folder. Use indexOf() to get the true ordinal index of a container item.
   * Use ctrIndexOf() to get the actual index of a container item, which will
   * return the same value as nsIRDFContainer.IndexOf()
   */

  long indexOf(in uri aURI);    /* Returns -1 if URI not found. */
  long ctrIndexOf(in uri aURI);

  aestring getName(in uri aURI);

  aestring getText(in uri aURI);

  aestring getSourceURL(in uri aURI);

  aestring getLabel(in uri aURI);

  aestring getShortcutKey(in uri aURI);

  aeIDictionary getShortcutKeyDict();

  uri getParent(in uri aURI);

  boolean isFolder(in uri aURI);

  boolean isClipping(in uri aURI);

  boolean isEmptyClipping(in uri aURI);

  /*
   * Method getCount():  Counts the number of clippings and folders directly
   * contained within the folder whose URI is passed as the argument; it is not
   * recursive.
   * Throws NS_ERROR_INVALID_ARG - if URI argument is not a folder resource
   */
  size_t getCount(in uri aFolderURI);

  /* 
   * Method getCountSubfolders():  Like getCount(), but counts subfolders only
   * throws NS_ERROR_INVALID_ARG - if URI argument is not a folder resource 
   */
  size_t getCountSubfolders(in uri aFolderURI);

  /*
   * Method recountAll():  Recounts the number of all clippings and folders
   * in the datasource and returns the new item count.
   */
  size_t recountAll();

  boolean hasSourceURL(in uri aURI);

  boolean hasLabel(in uri aURI);

  void setName(in uri aURI, in aestring aName);

  void setText(in uri aURI, in aestring aText);

  void setSourceURL(in uri aURI, in aestring aSourceURL);

  void setLabel(in uri aURI, in aestring aLabel);

  void setShortcutKey(in uri aURI, in aestring aKey);
  /* throws NS_ERROR_FAILURE if shortcut key already defined */

  /*
   * Creates a clipping name based on the first MAX_NAME_LENGTH characters from
   * aText.
   */
  aestring createClippingNameFromText(in aestring aText);

  void changePosition(in uri aParentFolder, in size_t aOldPos,
		      in size_t aNewPos);

  void flushDataSrc(in boolean aDoBackup); 
  /* throws NS_ERROR_FAILURE - if datasource flush failed */

  void refreshDataSrc();

  void exportToFile(in uri aFileURL, 
		    in short aFileType, 
		    in boolean aIncludeSrcURLs);
  /* throws NS_ERROR_INVALID_ARG - if aFileType is invalid */

  /*
   * Method importFromFile():
   * Shortcut keys are imported unless aImportShortcutKeys is false.
   * If aImportShortcutKeys is false, the shortcut key assignments in the
   * import file will be saved internally; method importShortcutKeys() must be
   * invoked to do the actual shortcut key import.
   * Method hasConflictingShortcutKeys() should be called first to determine
   * how to handle conflicting shortcut keys when invoking
   * importShortcutKeys().
   * If you don't want to import shortcut keys, call method
   * cancelDeferredShortcutKeyImport() after calling importFromFile().
   */
  size_t importFromFile(in  uri      aFileURL, 
			in  boolean  aDontNotify,
			in  boolean  aImportShortcutKeys,
			out nsIRDFContainer aImportRootCtr);
  /* throws NS_ERROR_FAILURE - if imported file not a valid datasource file */

  boolean hasConflictingShortcutKeys(in nsIRDFContainer aImportRootCtr);

  void importShortcutKeys(in nsIRDFContainer aImportRootCtr,
			  in short  importFlag);

  void cancelDeferredShortcutKeyImport();

  /*
   * Method processEmptyFolders():
   * Recursively scans through all empty folders in the data source and appends
   * the 'empty' clipping to them.  This is a workaround to bug 17413.
   */
  void processEmptyFolders();

  void removeAllSourceURLs();

  /*
   * Method processRootFolder():
   * Appends the 'empty' clipping to the root folder if the root folder doesn't
   * contain any clippings.  This is a workaround to bug 18579.
   */
  void processRootFolder();

  void createEmptyClipping(in uri aFolderURI);

  void setEmptyClippingString(in aestring aString);

  nsIDOMElement getClippingsAsHTMLNodes();

  void writeFile(in uri aFileURL, in aestring aData);

  void setBackupDir(in uri aBackupDirURL);

  void setMaxBackupFiles(in unsigned short aNumFiles);

  /*
   * Method getBackupFileNamesDict(): 
   * Returns a aeIDictionary object containing mappings of backup file names
   * to the corresponding human-readable date/time of the backup file
   */
  aeIDictionary getBackupFileNamesDict();

  nsIRDFDataSource recoverFromBackup();
  /* throws NS_ERROR_FAILURE - if recovery failed
            NS_ERROR_FILE_NOT_FOUND - if there were no backup files found */

  void killDataSrc();
  /* throws NS_ERROR_FILE_NOT_FOUND - if datasource file doesn't exist
            NS_ERROR_FAILURE - if datasource file cannot be deleted */

  /*
   * Notifies all listeners that the datasource location has changed.
   */
  void notifyDataSrcLocationChanged();

  void addListener(in aeIClippingsListener aListener);

  void removeListener(in aeIClippingsListener aListener);
};
